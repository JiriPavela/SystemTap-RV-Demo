global resources
global hits
global files_open_attempt
global files_close_attempt
global files_opened


probe process("./simple_resources7").function("prepare") {
    hits[probefunc()]++
    resources[$res] = hits[probefunc()]
}

probe process("./simple_resources7").function("cleanup") {
    hits[probefunc()]++
    if ([$res] in resources)
        delete resources[$res]
    else
        printf("Attempting to clean up uninitialized Resource: %p in %d. %s call\n", $res, hits[probefunc()], probefunc())
}

probe syscall.open, syscall.openat
{
    if (pid()==target()) {
        files_open_attempt[pid()] = filename
    }
}

probe syscall.open.return, syscall.openat.return
{
    if (pid()==target()) {
        filename = files_open_attempt[pid()]
        delete files_open_attempt[pid()]
        retval = strtol(retstr, 10)
        if (retval >= 0) {
            files_opened[pid(), retval] = filename
            printf("%s -- %s -- successfully opened: %s (%d)\n", ctime(gettimeofday_s()), execname(), filename, retval)
        } else {
            printf("%s -- %s -- failed to open: %s\n", ctime(gettimeofday_s()), execname(), filename)
        }
    }
}

probe syscall.close
{
    if (pid()==target()) {
        files_close_attempt[pid()] = fd
    }
}

probe syscall.close.return
{
    if (pid()==target()) {
        fd = files_close_attempt[pid()]
        delete files_close_attempt[pid()]
        retval = strtol(retstr, 10)
        if (retval != -1) {
            printf("%s -- %s -- successfully closed: %s (%d)\n", ctime(gettimeofday_s()), execname(), files_opened[pid(), fd], fd)
            delete files_opened[pid(), fd]
        } else {
            printf("%s -- %s -- failed to close: %s (%d)\n", ctime(gettimeofday_s()), execname(), files_opened[pid(), fd], fd)
        }
    }
}

probe process("./simple_resources7").end {
    dangling = 0
    foreach (res_addr in resources) {
        dangling++
        printf("Resource %p allocated in %d. prepare call was not freed\n", res_addr, resources[res_addr])
    }
    foreach ([pid, fd] in files_opened) {
        dangling++
        printf("File %s (%d) opened by PID(%d) was not properly closed\n", files_opened[pid, fd], fd, pid)
    }
        
    if (dangling != 0)
        printf("Failed: All resources not freed!\n")
    else
        printf("Ok: All resources correctly freed!\n")
}